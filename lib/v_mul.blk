-- 
-- Copyright (c) Microsoft Corporation
-- All rights reserved. 
--
-- Licensed under the Apache License, Version 2.0 (the ""License""); you
-- may not use this file except in compliance with the License. You may
-- obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR
-- CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT
-- LIMITATION ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR
-- A PARTICULAR PURPOSE, MERCHANTABLITY OR NON-INFRINGEMENT.
--
-- See the Apache Version 2.0 License for specific language governing
-- permissions and limitations under the License.
--
--

-- a * b
-- re32 = a.re * b.re - a.im * b.im
-- im32 = a.im * b.re + a.re * b.im
-- 
-- Note: we don't pack it in complex32 
-- as it requires extra cycles and is often not needed
let v_mul_complex16_int32(re:arr int, im:arr int, a:arr complex16, b:arr complex16) = 
  var vs1:arr[4] complex16;
  var vs2:arr[4] complex16;

  let vlen = (length(a) / 4) in
  let rlen = (length(a) - vlen*4) in 

  for i in [0, vlen] {
    vs1 := conj0w(b[4*i,4]);
    permutate_low1032w(b[4*i,4], vs2);
    permutate_high1032w (vs2,vs2);
    re[4*i,4] := muladdw(a[4*i,4],vs1);
    im[4*i,4] := muladdw(a[4*i,4],vs2)
  }

  -- Sum the rest one by one, if length is not modulo 4
  for i in [vlen*4,rlen] {
    re[i] := (int(a[i].re)*int(b[i].re) - int(a[i].im)*int(b[i].im ));
    im[i] := (int(a[i].im)*int(b[i].re) + int(a[i].re)*int(b[i].im ));
  };
in



-- c = (a * b) << shift
-- We need to do shift before casting to complex16 to avoid loss of precision
let v_mul_complex16(c:arr complex16, a:arr complex16, b:arr complex16, shift:int) = 
  var re32 : arr[length(a)] int32;
  var im32 : arr[length(a)] int32;

  v_mul_complex16_int32(re32, im32, a, b);
  if (shift > 0) then {
    v_shift_right_int32(re32,re32,shift);
    v_shift_right_int32(im32,im32,shift);
  }
  v_pack_int32_complex16(c,re32,im32);
in
