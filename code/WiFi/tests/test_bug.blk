-- 
-- Copyright (c) Microsoft Corporation
-- All rights reserved. 
--
-- Licensed under the Apache License, Version 2.0 (the ""License""); you
-- may not use this file except in compliance with the License. You may
-- obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR
-- CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT
-- LIMITATION ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR
-- A PARTICULAR PURPOSE, MERCHANTABLITY OR NON-INFRINGEMENT.
--
-- See the Apache Version 2.0 License for specific language governing
-- permissions and limitations under the License.
--
--


#include <externals.blk>
#include "../receiver/cca/cca.blk"
#include "../receiver/OFDM/LTS.blk"
#include "../receiver/removeDC.blk"
#include "../receiver/downSample.blk"
#include "../receiver/OFDM/DataSymbol.blk"
#include "../receiver/OFDM/FreqCompensation.blk"
#include "../receiver/OFDM/FFT.blk"
#include "../receiver/OFDM/ChannelEqualization.blk"
#include "../receiver/OFDM/PilotTrack.blk"
#include "../receiver/OFDM/GetData.blk"
#include "../receiver/decoding/DecodePLCP.blk"
--#include "../receiver/decoding/Decode.blk"
#include "../transmitter/crc.blk"

#include "../const.blk"
#include "../transmitter/scramble.blk"
#include "../receiver/decoding/DemapLimit.blk"
#include "../receiver/decoding/DemapBPSK.blk"
#include "../receiver/decoding/DemapQPSK.blk"
#include "../receiver/decoding/DemapQAM16.blk"
#include "../receiver/decoding/DemapQAM64.blk"
#include "../receiver/decoding/DeinterleaveBPSK.blk"
#include "../receiver/decoding/DeinterleaveQPSK.blk"
#include "../receiver/decoding/DeinterleaveQAM16.blk"
#include "../receiver/decoding/DeinterleaveQAM64.blk"
#include "../receiver/decoding/Viterbi.blk"



let comp MockViterbi(rate:int, len:int) = 
  var nOutput:int16;
  var outViterbi:arr[96000] bit; 

 repeat {

    (svalue:arr[48] int8) <- takes 48;
   
     do{
       nOutput := 48;
       for i in [0, nOutput] {
          if svalue[i] > 3 then {
             outViterbi[i] := '1;
          } else {
             outViterbi[i] := '0;
          }
       }
     };

     for i in [0, nOutput] {
       do{print outViterbi[i]};
       emit outViterbi[i];
     }
   }

in


let comp Decode(h : struct HeaderInfo) =
  -- +8 is for CRC (4 bits but byte aligned)
  DemapLimit(0) 

  >>> DemapBPSK() >>> DeinterleaveBPSK() 

  >>> Viterbi(h.coding, h.len*8 + 8) 
in 



let comp detectSTS() = 
  removeDC() >>> cca()
in 

-- FreqCompensation does not work but it is nor crucial so we remove it for now
--       DataSymbol() >>> FreqCompensation(params) >>> FFT() >>> ChannelEqualization(params) >>> 


let comp receiveBits() = 
       seq { hdata <- DecodePLCP()
           ; Decode(hdata) -->>> seq { (c : arr[4] bit) <- crc(hdata.len); check_crc(c) }
       }
in


let comp receiver() = 
  downSample() >>> 
  seq{ t<-detectSTS()
#ifndef FAST
     ; do{println "Detected at: ", t}
#endif
     ; params <- LTS()
     ; DataSymbol() >>> FFT() >>> ChannelEqualization(params)
       >>> PilotTrack()
       >>> GetData() 
       >>> receiveBits()
  }
in




read >>> receiver() >>> write
