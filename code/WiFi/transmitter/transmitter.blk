-- 
-- Copyright (c) Microsoft Corporation
-- All rights reserved. 
--
-- Licensed under the Apache License, Version 2.0 (the ""License""); you
-- may not use this file except in compliance with the License. You may
-- obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR
-- CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT
-- LIMITATION ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR
-- A PARTICULAR PURPOSE, MERCHANTABLITY OR NON-INFRINGEMENT.
--
-- See the Apache Version 2.0 License for specific language governing
-- permissions and limitations under the License.
--
--

#include "../const.blk"
#include <externals.blk>
#include "scramble.blk"
#include "encoding.blk"
#include "interleaving.blk"
#include "modulating.blk"
#include "crc.blk"
#include "map_ofdm.blk"
#include "parsePLCPHeader.blk"
#include "createPreamble.blk"
#include "ifft.blk"




-- We manually merge different CRC versions with different encoding functions
-- to faciliate vectorization. In future, this will be done automatically by the compiler.

let comp tx_driver(h : struct HeaderInfo) = 
 if h.coding == CR_34 then 
   (crc36(h.len) >>> scrambler() >>> encode34())
 else 
   if h.coding == CR_23 then
      (crc32(h.len) >>> scrambler() >>> encode23())
   else 
     -- if h.coding == CR_12 then
      (crc24(h.len) >>> scrambler() >>> encode12())
-- TODO: Causes C compilation error!
--     else
--       do{error "Unknown coding rate!"}
in


let comp transform_w_header() = 
      seq{ hInfo <- ( emitHeader() >>> 
                      scrambler() >>> 
                      encode12() >>> 
                      interleaver_bpsk() >>> 
                      modulate_bpsk() )
         ; crc <- tx_driver(hInfo) >>> interleaver(hInfo.modulation) >>> modulate(hInfo.modulation)
         }
in






let comp transmitter() = 
seq{ emits createSTSinTime()
   ; emits createLTSinTime()
   ; (transform_w_header() >>> map_ofdm() >>> ifft())
   }
in

