let bitToInt(u:unit) = 
   repeat(
     x <- take1;
     y <- return (if (x=='0) {48} else {49});
     emit y
   )
in

let trans(u:unit) = 
  var scrmbl_st: arr[7] bit := {'1,'1,'1,'1,'1,'1,'1}; 
  
  let scr(x : bit) = 
    var y : bit;
    var tmp: bit;
    tmp := (scrmbl_st[3] ^ scrmbl_st[0]);
    scrmbl_st[0:5] := scrmbl_st[1:6];
    scrmbl_st[6] := tmp;
    y := x ^ tmp;
    y
  in 

  times 12 do (
    x <- take1;
    emit (scr(x))
  )
in


let trans6(u:unit) = 
  var scrmbl_st: arr[7] bit := {'1,'1,'1,'1,'1,'1,'1}; 
  
  let scr(x : arr [6] bit) = 
    var y : arr [6] bit;
    var tmp: bit;
    for i in 0,6 {
      tmp := (scrmbl_st[3] ^ scrmbl_st[0]);
      scrmbl_st[0:5] := scrmbl_st[1:6];
      scrmbl_st[6] := tmp;
      y[i] := x[i] ^ tmp
    };
    y
  in 

  times 2 do (
    x <- take 6;
    emits (scr(x))
  )
in


read >>> (trans(tt); trans6(tt)) >>> write


-- Expected result: 000011101111
-- States: 
-- 1111111 
-- 0111111
-- 0011111
-- 0001111
-- 0000111
-- 1000011
-- 1100001
-- 1110000
-- 0111000
-- 1011100
-- 1101110
-- 1110111
-- 1111011
