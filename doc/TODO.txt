

High-level TODO's 
=======================

[EASY, in roughly highest to lowest priority]
-Add syntax/codegen for bit datatype
-Complex numbers 
-Support for external C function declarations: let extern f(...) : <type-sig> in
-Add support for char/word8 
-Fix Parsec parser error messages
-Type annotations
-Rewrite driver files and unify various versions (test, perf, ...)


[MEDIUM DIFFICULTY]
-Pipeline parallelization
-Memoizing functions using lookup tables
->>> vs. ++> (That is, allowing computers to the left of >>>.)  This will require
updates just to the typechecker (in particular, code generation should be 
unaffected).


[HARDER]
-Smart take/emit (w/ granularities)
(This is related to vectorization for the bit datatype, and
later on, perhaps general vectorization)
-SSE + unrolling
-Finalizers 



[Older TODO's]:
-Add support for type annotations [cf. ABOVE]
-Add support for product types 
  + Parser
  + Typechecker (already DONE)
  + Code generator
-Add support for complex numbers, including complex literals [cf. ABOVE]
-Add support for sums, case analysis?
-Add support for array types polymorphic in array size 
(probably don't want general pointers)
-Build a REPL?
-Parsec parser often gives bad error messages



WiFi TODO's
===========

The compiler/examples directory contains adaptations of code from 
Bozidar's Haskell wifi 802.11a transmitter (cf. wifi/txblocks.hs).

Implemented:
-CRC
-Encoding
-Scramble
-Spread
-Interleaving

Still to do:
-Modulation
-Generation of pilot sequence
-mapOFDM function

Each implemented component contains a .infile and a .outfile.ground giving
a sample input and the expected output for the component on that input.  
These were checked (by hand) against the output generated by Bozidar's 
Haskell code.


Bugfix TODO's
=============

-Parsing (if e then c1 else c2); c3    vs.   if e then c1 else c2; c3   vs   ...  (c2; c3)
-Probably other parsing bugs


 



